import random
from PIL import Image, ImageTk
from tkinter import Tk, Button, Label, Frame, DISABLED, NORMAL, messagebox
import unicodedata
import os

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
player_level = 1
player_bonus = 0
player_hand = []
current_monster = None
player_class = None


equipped = {
    "weapon": None,
    "armor": None,
    "helmet": None
}

treasure_deck = [
    "–ú–µ—á +2", "–©–∏—Ç +4", "–ó–µ–ª—å–µ +2", "–±—Ä–æ–Ω–∏–∫ +3", "–ö–∏–Ω–∂–∞–ª +3",
    "–ì–æ–ª–æ–≤–Ω—è–∫ +3", "–ë–∞—à–º–∞–∫–∏ +2", "–ö–∏–π +1",
    "–ö—Ä—ã—Å–∞ +1", "–ú–æ–ª–æ—Ç +4"
]

door_deck = [
    {"name": "–ú–æ–ª–æ—Ç–∞—è –∫—Ä—ã—Å–æ—Ç–∫–∞", "power": 1, "treasures": 1},
    {"name": "–¢–∏–ø–∞ –≤–æ—à–∫–∏", "power": 1, "treasures": 1},
    {"name": "–õ—è—Ç—É—á–∏–µ –õ—è–≥—É—à–∫–∏", "power": 2, "treasures": 1},
    {"name": "–ü–∏—Ç–±—É–ª—å", "power": 2, "treasures": 1},
    {"name": "–°–µ—Ä–¥–∏—Ç—ã–π –ë—Ä–æ–π–ª–µ—Ä", "power": 2, "treasures": 1},
    {"name": "–ö–æ–Ω—å –ê–Ω–¥–µ–¥–Ω—ã–π", "power": 3, "treasures": 2},
    {"name": "–õ–µ–ø—Ä–∏–∫–æ–Ω", "power": 4, "treasures": 2},
    {"name": "–ì–∞—Ä–ø–∏—Å—Ç–∫–∏", "power": 4, "treasures": 2},
    {"name": "–£—Ç–∫–æ–Ω—Ç–∏–∫–æ—Ä–∞", "power": 6, "treasures": 2},

    {"name": "–ü—Ä–æ–∫–ª—è—Ç–∏–µ! –ü–æ—Ç–µ—Ä—è–π —É—Ä–æ–≤–µ–Ω—å", "curse": True},
    {"name": "–ü–æ–ª—É—á–∏ —É—Ä–æ–≤–µ–Ω—å", "levelUP": True},

    {"name": "–ö–ª–∞—Å—Å –í–æ–∏–Ω", "type": "class"},
    {"name": "–ö–ª–∞—Å—Å –ú–∞–≥", "type": "class"},
    {"name": "–ö–ª–∞—Å—Å –≠–ª—å—Ñ", "type": "class"},
    {"name": "–ö–ª–∞—Å—Å –ö–ª–∏—Ä–∏–∫", "type": "class"},
    {"name": "–ö–ª–∞—Å—Å –í–æ—Ä", "type": "class"}
]

random.shuffle(door_deck)
random.shuffle(treasure_deck)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
def normalize_card_name(card_name):
     # –£–¥–∞–ª–∏–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –ø–µ—Ä–µ–≤–µ–¥–µ–º –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
    name = unicodedata.normalize("NFKD", card_name)
    name = name.lower().replace(" ", "_")
    name = ''.join(c for c in name if c.isalnum() or c in "_")
    return name


def show_card_image(card_name):
    try:
        normalized_name = normalize_card_name(card_name)
        filename = f"{normalized_name}.png" # –§–∞–π–ª –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ

        # –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É: {filename}")
        print("–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏?", os.path.exists(filename))
        print("–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞:", os.getcwd())


        if not os.path.exists(filename):
            raise FileNotFoundError
        img = Image.open(filename).resize((200, 300))
        img_tk = ImageTk.PhotoImage(img)
        card_image_label.config(image=img_tk, text="")
        card_image_label.image = img_tk
    except:
        card_image_label.image = None
        card_image_label.config(image="", text="(–Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")

# –í—ã–±–∏—Ä–∞–µ–º —á—Ç–æ —É –Ω–∞—Å –∑–∞ –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–æ—Ä–æ–≤–∏—â–∞—Ö
def get_item_type(item_name):
    item_name = item_name.lower()
    if "–º–µ—á" in item_name or "–∫–∏–π–Ω" in item_name or "–∫–∏–Ω–∂–∞–ª" in item_name or "–º–æ–ª–æ—Ç" in item_name:
        return "weapon"
    elif "–±—Ä–æ–Ω–∏–∫" in item_name or "—â–∏—Ç" in item_name:
        return "armor"
    elif "–≥–æ–ª–æ–≤–Ω—è–∫" in item_name:
        return "helmet"
    return None

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def update_ui():
    class_text = player_class if player_class else "–ß–µ–ª–æ–≤–µ–∫"
     # –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∏–∑ —Å–æ–∫—Ä–æ–≤–∏—â
    treasures_only = [card for card in player_hand if card != player_class]
    treasures_text = ', '.join(treasures_only) if treasures_only else "‚Äî"
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    info_label.config(
        text=f"–£—Ä–æ–≤–µ–Ω—å: {player_level}"
             f"{f'\n–ö–ª–∞—Å—Å: {player_class}' if player_class else ''}"
             f"\n–ö–∞—Ä—Ç—ã: {', '.join(player_hand)}"
    )
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –∏–≥—Ä–æ–∫–∞
    equipment_text = ", ".join(f"{slot}: {item}" for slot, item in equipped.items() if item)
    if equipment_text:
        info_label.config(text=info_label.cget("text") + f"\n–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ: {equipment_text}")
    player_status_label.config(
        text=f"‚óä –£—Ä–æ–≤–µ–Ω—å: {player_level}   |   üõ° –ö–ª–∞—Å—Å: {class_text}   |   üíº –°–æ–∫—Ä–æ–≤–∏—â–∞: {treasures_text}"
    )

# –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–≤–µ—Ä–∏
def draw_door():
    global current_monster, player_level, player_class
    if door_deck:
        card = random.choice(door_deck)
        if "power" in card:
            show_card_image(card["name"])
            current_monster = card
            info_label.config(text=f"–ú–æ–Ω—Å—Ç—Ä: {card['name']} (–°–∏–ª–∞ {card['power']})")
            fight_button.config(state=NORMAL)
            run_button.config(state=NORMAL)
        elif "curse" in card:
            show_card_image(card["name"])
            player_level = max(1, player_level - 1)
            info_label.config(text=f"–ü—Ä–æ–∫–ª—è—Ç–∏–µ! {card['name']}\n–£—Ä–æ–≤–µ–Ω—å: {player_level}")
        elif "levelUP" in card:
            show_card_image(card["name"])
            player_level += 1
            info_label.config(text=f"–ü–æ–ª—É—á–∏ —É—Ä–æ–≤–µ–Ω—å! {card['name']}\n–£—Ä–æ–≤–µ–Ω—å: {player_level}")
        elif card.get("type") == "class":
            show_card_image(card["name"])
            if player_class:
                answer = messagebox.askyesno(
                    "–ù–æ–≤—ã–π –∫–ª–∞—Å—Å",
                    f"–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫–ª–∞—Å—Å: {player_class}.\n–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ {card['name']}?"
                )
                if answer:
                    if player_class in player_hand:
                        player_hand.remove(player_class)
                    player_class = card["name"]
                    player_hand.append(card["name"])
                    update_ui()
                else:
                    info_label.config(text=f"–¢—ã –æ—Å—Ç–∞–≤–∏–ª —Å–µ–±–µ –ø—Ä–µ–∂–Ω–∏–π –∫–ª–∞—Å—Å: {player_class}")
            else:
                player_class = card["name"]
                player_hand.append(card["name"])
                update_ui()
        else:
            show_card_image(card["name"])
            player_hand.append(card["name"])
            update_ui()

# –ë–æ–π
def fight():
    global current_monster, player_level
    if current_monster:
        player_power = player_level + player_bonus
        monster_power = current_monster["power"]
        if player_power >= monster_power:
            player_level += 1
            for _ in range(current_monster["treasures"]):
                if treasure_deck:
                    card = random.choice(treasure_deck)
                    item_type = get_item_type(card)
                    if item_type and equipped[item_type]:
                        answer = messagebox.askyesno(
                            "–ù–æ–≤–∞—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞",
                            f"–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å {item_type}: {equipped[item_type]}\n–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ {card}?"
                        )
                        if answer:
                            player_hand.remove(equipped[item_type])
                            equipped[item_type] = card
                            player_hand.append(card)
                    else:
                        if item_type:
                            equipped[item_type] = card
                        player_hand.append(card)
                    show_card_image(card)
            info_label.config(
                text=f"–¢—ã –ø–æ–±–µ–¥–∏–ª! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {player_level}\n–ö–∞—Ä—Ç—ã: {', '.join(player_hand)}"
            )
            update_ui()
        else:
            info_label.config(text="–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –ü—Ä–æ–±—É–π —É–±–µ–∂–∞—Ç—å!")
        current_monster = None
        fight_button.config(state=DISABLED)

# –£–±–µ–∂–∞—Ç—å
def run_away():
    global player_level
    roll = random.randint(1, 6)
    if roll >= 5:
        info_label.config(text="–¢—ã —É–±–µ–∂–∞–ª!")
    else:
        player_level = max(1, player_level - 1)
        info_label.config(text="–¢–µ–±—è –ø–æ–π–º–∞–ª–∏! –ü–æ—Ç–µ—Ä—è–π 1 —É—Ä–æ–≤–µ–Ω—å")
    run_button.config(state=DISABLED)
    fight_button.config(state=DISABLED)

# –ö–æ–Ω–µ—Ü —Ö–æ–¥–∞
def end_turn():
    info_label.config(text="–ö–æ–Ω–µ—Ü —Ö–æ–¥–∞! –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞.")
    card_image_label.config(image="", text="")

# –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
root = Tk()
root.title("–ú–∞–Ω—á–∫–∏–Ω –Ω–∞ Python")
root.geometry("800x700")

# –§–æ–Ω
bg_image = Image.open(r"C:\\Users\\kotik\\source\\repos\\Ulesanned\\Ulesanne_MyWork\\wood.jpg")
bg_image = bg_image.resize((800, 700))
bg_photo = ImageTk.PhotoImage(bg_image)
Label(root, image=bg_photo).place(x=0, y=0, relwidth=1, relheight=1)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
Label(root, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞–Ω—á–∫–∏–Ω!", font=("Arial", 16), bg="#ffffff").pack(pady=10)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
info_label = Label(root, text="–£—Ä–æ–≤–µ–Ω—å: 1\n–ö–∞—Ä—Ç—ã: []", font=("Arial", 12), bg="#ffffff")
info_label.pack(pady=10)

# –ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
card_image_label = Label(root, bg="#ffffff", text="(–∫–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç —Ç—É—Ç)", font=("Arial", 10))
card_image_label.pack(pady=10)

# –°—Ç–∞—Ç—É—Å—ã –∏–≥—Ä–æ–∫–∞
player_status_label = Label(root, font=("Arial", 11), bg="#ffffff")
player_status_label.pack(pady=5)

# –ö–Ω–æ–ø–∫–∏
button_frame = Frame(root, bg="#ffffff")
button_frame.pack(pady=10)

draw_door_button = Button(button_frame, text="–û—Ç–∫—Ä—ã—Ç—å –î–≤–µ—Ä—å", command=draw_door)
draw_door_button.grid(row=0, column=0, padx=5)

fight_button = Button(button_frame, text="–ë–∏—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–æ–º", command=fight, state=DISABLED)
fight_button.grid(row=0, column=1, padx=5)

run_button = Button(button_frame, text="–£–±–µ–∂–∞—Ç—å", command=run_away, state=DISABLED)
run_button.grid(row=0, column=2, padx=5)

end_turn_button = Button(button_frame, text="–ö–æ–Ω–µ—Ü —Ö–æ–¥–∞", command=end_turn)
end_turn_button.grid(row=0, column=3, padx=5)

root.mainloop()
